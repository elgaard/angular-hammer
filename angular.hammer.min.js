(function(angular,Hammer){"use strict";if(typeof angular==="undefined"){throw Error("angular-hammer: AngularJS (angular) is undefined but is necessary.")}if(typeof Hammer==="undefined"){throw Error("angular-hammer: HammerJS (Hammer) is undefined but is necessary.")}var gestureTypes=["hmCustom:custom","hmSwipe:swipe","hmSwipeleft:swipeleft","hmSwiperight:swiperight","hmSwipeup:swipeup","hmSwipedown:swipedown","hmPan:pan","hmPanstart:panstart","hmPanmove:panmove","hmPanend:panend","hmPancancel:pancancel","hmPanleft:panleft","hmPanright:panright","hmPanup:panup","hmPandown:pandown","hmPress:press","hmPressup:pressup","hmRotate:rotate","hmRotatestart:rotatestart","hmRotatemove:rotatemove","hmRotateend:rotateend","hmRotatecancel:rotatecancel","hmPinch:pinch","hmPinchstart:pinchstart","hmPinchmove:pinchmove","hmPinchend:pinchend","hmPinchcancel:pinchcancel","hmPinchin:pinchin","hmPinchout:pinchout","hmTap:tap","hmDoubletap:doubletap"];var NAME="hmTouchEvents";var hmTouchEvents=angular.module("hmTouchEvents",[]);hmTouchEvents.provider(NAME,function(){var self=this;var defaultRecognizerOpts=false;var recognizerOptsHash={};var managerOpts={};var recognizerFnToName={};recognizerFnToName[Hammer.Tap.toString()]="tap";recognizerFnToName[Hammer.Pan.toString()]="pan";recognizerFnToName[Hammer.Pinch.toString()]="pinch";recognizerFnToName[Hammer.Press.toString()]="press";recognizerFnToName[Hammer.Rotate.toString()]="rotate";recognizerFnToName[Hammer.Swipe.toString()]="swipe";function normalizeRecognizerOptions(opts){opts=angular.copy(opts);if(opts.event){if(opts.event=="doubletap"){opts.type="tap";if(!opts.taps)opts.taps=2;opts._name="doubletap"}else{opts._name=false}}else{opts._name=opts.type||false}return opts}function defaultOptionsForEvent(eventName){if(eventName=="custom"){throw Error(NAME+"Provider: no defaults exist for custom events")}var ty=getRecognizerTypeFromeventName(eventName);return normalizeRecognizerOptions(eventName=="doubletap"?{type:ty,event:"doubletap"}:{type:ty})}self.applyHammerPresets=function(){var hammerPresets=Hammer.defaults.preset;angular.forEach(hammerPresets,function(presetArr){var data=presetArr[1];if(!data.type)data.type=recognizerFnToName[presetArr[0]];data=normalizeRecognizerOptions(data);if(!data._name)return;recognizerOptsHash[data._name]=data})};self.addManagerOption=function(name,val){if(typeof name=="object"){angular.extend(managerOpts,name)}else{managerOpts[name]=val}};self.addRecognizerOption=function(val){if(Array.isArray(val)){for(var i=0;i<val.length;i++)self.addRecognizerOption(val[i]);return}if(typeof val!=="object"){throw Error(NAME+"Provider: addRecognizerOption: should be object or array of objects")}val=normalizeRecognizerOptions(val);if(val._name){recognizerOptsHash[val.type]=val}else if(!val.event){defaultRecognizerOpts=val}};self.$get=function(){return{extendWithDefaultManagerOpts:function(opts){if(typeof opts!="object"){opts={}}else{opts=angular.copy(opts)}for(var name in managerOpts){if(!opts[name])opts[name]=angular.copy(managerOpts[name])}return opts},extendWithDefaultRecognizerOpts:function(eventName,opts){if(typeof opts!=="object"){opts=[]}if(!Array.isArray(opts)){opts=[opts]}if(eventName=="custom")return opts;var recognizerType=getRecognizerTypeFromeventName(eventName);var specificOpts=recognizerOptsHash[eventName]||recognizerOptsHash[recognizerType];var foundOpt;var isExactMatch=false;var defaults=angular.extend({},defaultRecognizerOpts||{},specificOpts||{});opts.forEach(function(opt){if(!opt.event&&!opt.type){return angular.extend(defaults,opt)}if(isExactMatch){return}if(opt.event==eventName){foundOpt=opt;isExactMatch=true}else if(!opt.event&&opt.type==recognizerType){foundOpt=opt}});if(!foundOpt)foundOpt=defaultOptionsForEvent(eventName);else foundOpt=normalizeRecognizerOptions(foundOpt);return[angular.extend(defaults,foundOpt)]}}}});angular.forEach(gestureTypes,function(type){var directive=type.split(":"),directiveName=directive[0],eventName=directive[1];hmTouchEvents.directive(directiveName,["$parse","$window",NAME,function($parse,$window,defaultEvents){return{restrict:"A",scope:false,link:function(scope,element,attrs){if(!Hammer||!$window.addEventListener){throw Error(NAME+": window.Hammer or window.addEventListener not found, can't add event "+directiveName)}var hammer=element.data("hammer"),managerOpts=defaultEvents.extendWithDefaultManagerOpts(scope.$eval(attrs.hmManagerOptions)),recognizerOpts=defaultEvents.extendWithDefaultRecognizerOpts(eventName,scope.$eval(attrs.hmRecognizerOptions));if(!hammer){hammer=new Hammer.Manager(element[0],managerOpts);element.data("hammer",hammer);scope.$on("$destroy",function(){hammer.destroy()})}var handlerExpr=$parse(attrs[directiveName]).bind(null,scope);var handler=function(event){event.element=element;var invokeApply=true;var recognizer=hammer.get(getRecognizerTypeFromeventName(event.type));if(recognizer){var opts=recognizer.options;if(opts.preventDefault){event.preventDefault()}if(opts.stopPropagation){event.srcEvent.stopPropagation()}invokeApply=angular.isUndefined(opts.invokeApply)||opts.invokeApply}if(invokeApply){scope.$apply(function(){handlerExpr({$event:event})})}else{handlerExpr({$event:event})}};angular.forEach(recognizerOpts,function(options){if(eventName!=="custom"){if(eventName==="doubletap"&&hammer.get("tap")){options.recognizeWith="tap"}else if(options.type=="pan"&&hammer.get("swipe")){options.recognizeWith="swipe"}else if(options.type=="pinch"&&hammer.get("rotate")){options.recognizeWith="rotate"}}setupRecognizerWithOptions(hammer,applyManagerOptions(managerOpts,options),element);hammer.on(eventName=="custom"?options.event:eventName,handler)})}}}])});function addRecognizer(manager,name){if(manager===undefined||name===undefined){return null}var recognizer;if(name.indexOf("pan")>-1){recognizer=new Hammer.Pan}else if(name.indexOf("pinch")>-1){recognizer=new Hammer.Pinch}else if(name.indexOf("press")>-1){recognizer=new Hammer.Press}else if(name.indexOf("rotate")>-1){recognizer=new Hammer.Rotate}else if(name.indexOf("swipe")>-1){recognizer=new Hammer.Swipe}else{recognizer=new Hammer.Tap}manager.add(recognizer);return recognizer}function applyManagerOptions(managerOpts,recognizerOpts){if(managerOpts){recognizerOpts.preventGhosts=managerOpts.preventGhosts||recognizerOpts.preventGhosts}return recognizerOpts}function getRecognizerTypeFromeventName(eventName){if(eventName.indexOf("pan")>-1){return"pan"}else if(eventName.indexOf("pinch")>-1){return"pinch"}else if(eventName.indexOf("press")>-1){return"press"}else if(eventName.indexOf("rotate")>-1){return"rotate"}else if(eventName.indexOf("swipe")>-1){return"swipe"}else if(eventName.indexOf("tap")>-1){return"tap"}else{return"custom"}}function setupRecognizerWithOptions(manager,options,element){if(manager==null||options==null||options.type==null){return console.error("ERROR: Angular Hammer could not setup the"+" recognizer. Values of the passed manager and options: ",manager,options)}if(options.preventGhosts===true&&element!=null){preventGhosts(element)}if(!options._name){recognizer=addRecognizer(manager,options.type);recognizer.set(options);return}var recognizer=manager.get(options._name);if(!recognizer){recognizer=addRecognizer(manager,options._name)}if(!options.directions){if(options._name==="pan"||options._name==="swipe"){options.directions="DIRECTION_ALL"}else if(options._name.indexOf("left")>-1){options.directions="DIRECTION_LEFT"}else if(options._name.indexOf("right")>-1){options.directions="DIRECTION_RIGHT"}else if(options._name.indexOf("up")>-1){options.directions="DIRECTION_UP"}else if(options._name.indexOf("down")>-1){options.directions="DIRECTION_DOWN"}else{options.directions=""}}options.direction=parseDirections(options.directions);recognizer.set(options);if(typeof options.recognizeWith==="string"){var recognizeWithRecognizer;if(manager.get(options.recognizeWith)==null){recognizeWithRecognizer=addRecognizer(manager,options.recognizeWith)}if(recognizeWithRecognizer!=null){recognizer.recognizeWith(recognizeWithRecognizer)}}if(typeof options.dropRecognizeWith==="string"&&manager.get(options.dropRecognizeWith)!=null){recognizer.dropRecognizeWith(manager.get(options.dropRecognizeWith))}if(typeof options.requireFailure==="string"){var requireFailureRecognizer;if(manager.get(options.requireFailure)==null){requireFailureRecognizer=addRecognizer(manager,{type:options.requireFailure})}if(requireFailureRecognizer!=null){recognizer.requireFailure(requireFailureRecognizer)}}if(typeof options.dropRequireFailure==="string"&&manager.get(options.dropRequireFailure)!=null){recognizer.dropRequireFailure(manager.get(options.dropRequireFailure))}}function parseDirections(dirs){var directions=0;angular.forEach(dirs.split("|"),function(direction){if(Hammer.hasOwnProperty(direction)){directions=directions|Hammer[direction]}});return directions}function preventGhosts(element){if(!element){return}var coordinates=[],threshold=25,timeout=2500;if("ontouchstart"in window){element[0].addEventListener("touchstart",resetCoordinates,true);element[0].addEventListener("touchend",registerCoordinates,true);element[0].addEventListener("click",preventGhostClick,true);element[0].addEventListener("mouseup",preventGhostClick,true)}function preventGhostClick(ev){for(var i=0;i<coordinates.length;i++){var x=coordinates[i][0];var y=coordinates[i][1];if(Math.abs(ev.clientX-x)<threshold&&Math.abs(ev.clientY-y)<threshold){ev.stopPropagation();ev.preventDefault();break}}}function resetCoordinates(){coordinates=[]}function popCoordinates(){coordinates.splice(0,1)}function registerCoordinates(ev){if(ev.touches.length-ev.changedTouches.length<=0){var touch=ev.changedTouches[0];coordinates.push([touch.clientX,touch.clientY]);setTimeout(popCoordinates,timeout)}}}})(angular,Hammer);
//# sourceMappingURL=angular.hammer.min.js.map